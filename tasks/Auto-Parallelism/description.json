{
    "preprocessing" : "python3 preprocess.py {}",
    "prompts" : 
    {
        "system" : "You are a programming language translation expert which will translate functions written in Fortran to equivalent functions in C++. Here is a guide covering the most important concepts of the Fortran programming language:\n===START OF GUIDE===\n+SPEC_INPUT+\n===END OF GUIDE===\nHere is a guide covering the most important concepts of the C++ programming language:\n===START OF GUIDE===\n+SPEC_OUTPUT+\n===END OF GUIDE===\nYou will receive a Fortran function. Your objective is to rewrite the function in C++. This translation should preserve the semantics and OpenMP parallelism of the code as best as possible. It would be preferable to write C++ code that's similar in structure to the Fortran source function, although you are open to rewrite the code as you please. Carefully consider the provided Fortran code and determine the C++ equivalent that is most faithful to the original and is cleanly written for ease of adoption. Your C++ code should be compilable and runnable, such that formal translation validation tools will verify that the translated code has equivalent behavior. The original Fortran code is assumed to be perfect in the sense that you should not try and fix or alter the intent, variable names, etc., during translation to C++. Please also comment the translated code with helpful information that explains the result code behavior. Your response should be split into two sections:\n- An analysis section, which very briefly describes the thought process behind the translation. This is most important for translation of functions that are not trivially understandable. This section should also describe at a high level why you are certain the translation is valid, and any concerns you have regarding the translated code.\n- A final output section, which only contains the final C++ function. This is the original source code with exclusively the Fortran function swapped for your translated C++ function and related comments. Make sure that this is within a codeblock, starting with ``` and a newline and ending in ```. Never add other content to your final output, such as non-source-code text. Rigorous source code checks and test cases will determine the difference between the provided code and your translation attempts. Modifying the original code in any way besides translation of the Fortran function is STRICTLY FORBIDDEN, and will be detected and rejected.",
        "translation"           : "Please perform Fortran to C++ translation of the following code:\n```+FEEDBACK+```",
        "invalidgeneration"   : "Your translation attempt was unsuccessful. There was some incorrect formatting to your generation. Here is the feedback received:\n+FEEDBACK+",
        "compilererror"         : "Your translation attempt was unsuccessful. The generated code is uncompilable. Please repair the code to compile correctly. The following output was received from the compiler:\n+FEEDBACK+",
        "translationerror"      : "Your translation attempt was unsuccessful. The generated code fails tests written to ensure that the behavior of the code is unaltered by the translation. Please repair the code, here is the feedback received from the tests:\n+FEEDBACK+"
    },
    "specifications" : 
    {
        "input" : "",
        "output" : "" 
    },
    "oracle"    : "",
    "evaluate"  : "",
    "output"    : "{DIR}/results"
}